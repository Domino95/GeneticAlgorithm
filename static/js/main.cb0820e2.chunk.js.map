{"version":3,"sources":["Content.js","App.js","index.js"],"names":["Content","useState","numberPopulation","setnumberPopulation","result","setresult","iterations","setiterations","endresult","setendresult","endpopulation","setendpopulation","counter","setcounter","adaptation","setadaptation","mutations","setmutations","cross","setcorss","handleinput","e","target","id","value","createBinaryString","nMask","nFlag","nShifted","sMask","String","replace","slice","adaptationResult","startPopulation","map","i","Math","log","pow","push","console","SumAdaptationResult","sumAdaptation","percentAdaptation","rouletteWheel","newPopulation","length","random","crosses","counterCouple","couplePopulation","1","2","child1","child2","populationAfter","index","point","floor","parent1","parent2","splice","stringToReplace1","substr","stringToReplace2","parseInt","mutation","parent","before","after","substring","mutated","charAt","mutatedChild","theBestChromosome","resultAdaptations","populations","chromosome","run","BestChromosome","percentAdaptations","populationAfterRouletteWhell","populationAfterCross","populationAfterMutated","className","htmlFor","type","onChange","min","max","onClick","style","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb0820e2.chunk.js","sourcesContent":["/* eslint-disable no-cond-assign */\nimport React, { useState } from 'react';\nimport \"./App.css\"\nconst Content = () => {\n    const [numberPopulation, setnumberPopulation] = useState(10)\n    const [result, setresult] = useState(41260)\n    const [iterations, setiterations] = useState(3)\n    const [endresult, setendresult] = useState([])\n    const [endpopulation, setendpopulation] = useState()\n    const [counter, setcounter] = useState()\n    const [adaptation, setadaptation] = useState()\n    const [mutations, setmutations] = useState(0.10)\n    const [cross, setcorss] = useState(0.75)\n\n\n    const handleinput = (e) => {\n        if (e.target.id === \"number\")\n            setnumberPopulation(e.target.value)\n        if (e.target.id === \"result\")\n            setresult(e.target.value)\n        if (e.target.id === \"iterations\")\n            setiterations(e.target.value)\n        if (e.target.id === \"mutations\")\n            setmutations(e.target.value)\n        if (e.target.id === \"cross\")\n            setcorss(e.target.value)\n    }\n\n    function createBinaryString(nMask) {\n\n        for (var nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n            nFlag++ , sMask += String(nShifted >>> 31), nShifted <<= 1);\n        sMask = sMask.replace(/\\B(?=(.{8})+(?!.))/g, \" \")\n\n        return sMask.slice(-5);\n    }\n\n    const startPopulation = (numberPopulation) => {\n        //Losowanie poczatkowej populacji\n        let startPopulation = []\n        for (let i = 0; i < numberPopulation; i++) {\n            startPopulation.push(Math.floor(Math.random() * 32))\n        }\n        console.log('Startowa poulacja: ' + startPopulation)\n        return startPopulation\n    }\n\n    const adaptationResult = (startPopulation) => {\n        // Obliczanie wartosci przystosowania\n        let adaptationResult = []\n        startPopulation.map(i => {\n            let result = (Math.log(32) / Math.log(2)) + 4 * Math.pow(i, 2) - 9 * i\n            adaptationResult.push(result)\n        })\n        console.log(\"wynik adaptacji: \" + adaptationResult)\n        return adaptationResult\n    }\n\n    const SumAdaptationResult = (adaptationResult) => {\n        // Suma wartosci przystosowania\n        let sumAdaptation = 0\n        adaptationResult.map(i => {\n            sumAdaptation = sumAdaptation + i\n\n        })\n        console.log(\"suma adaptacji populacji: \" + sumAdaptation)\n        return sumAdaptation\n    }\n\n    const percentAdaptation = (adaptationResult, sumAdaptation) => {\n        // Wartosci przystosowania w procentach\n        let percentAdaptation = []\n        adaptationResult.map(i => {\n            let result = i / sumAdaptation * 100\n            percentAdaptation.push(result)\n\n        }\n        )\n        // console.log(\"Procentowa wartosc adaptacji \" + percentAdaptation)\n        console.log(\"wartosc procentowa przystosowania: \" + percentAdaptation)\n        return percentAdaptation\n    }\n\n    const rouletteWheel = (percentAdaptation, startPopulation) => {\n        // Selekcja kolo ruletki\n        let rouletteWheel = []\n        let result = 0\n        percentAdaptation.map(i => {\n            result = result + i\n            rouletteWheel.push(result)\n\n\n        })\n        let newPopulation = []\n        for (let i = 0; i < startPopulation.length; i++) {\n            let random = Math.random() * 100\n            for (let i = 0; i < startPopulation.length; i++) {\n                if (i === 0 && random < rouletteWheel[i]) {\n                    newPopulation.push(startPopulation[i])\n                    // console.log(\"wylosowana \" + random)\n                    // console.log(\"wybrana \" + rouletteWheel[i], i)\n                }\n                else if (i > 0 && random > rouletteWheel[i - 1] && random < rouletteWheel[i]) {\n                    newPopulation.push(startPopulation[i])\n                    // console.log(\"wylosowana \" + random)\n                    // console.log(\"wybrana \" + rouletteWheel[i], i)\n                }\n            }\n        }\n        console.log(\"populacja po selekcji\" + newPopulation)\n        return newPopulation\n    }\n\n\n    const crosses = (newPopulation) => {\n        //Krzyzowanie\n        let counterCouple = newPopulation.length / 2\n        let couplePopulation = []\n        let counter = 0\n        for (let i = 0; i < counterCouple; i++) {\n            couplePopulation.push({\n                1: newPopulation[counter],\n                2: newPopulation[counter + 1]\n            })\n            counter = counter + 2\n        }\n        let child1 = '';\n        let child2 = '';\n        let populationAfter = []\n        couplePopulation.map((i, index) => {\n            let probability = Math.random();\n            if (probability <= cross) {\n                let point = Math.floor(Math.random() * 4) + 1;\n                let parent1 = createBinaryString(i[1])\n                let parent2 = createBinaryString(i[2])\n                couplePopulation.splice(index, 1)\n\n                let stringToReplace1 = parent1.substr(point)\n                let stringToReplace2 = parent2.substr(point)\n\n                child1 = parent1.slice(0, point) + stringToReplace2\n                child2 = parent2.slice(0, point) + stringToReplace1\n\n                populationAfter.push(parseInt(child1, 2), parseInt(child2, 2))\n\n            }\n\n        })\n        for (let i = 0; i < couplePopulation.length; i++) {\n            populationAfter.push(couplePopulation[i][1])\n            populationAfter.push(couplePopulation[i][2])\n        }\n        console.log(\"Populacja po krzyzowaniu: \" + populationAfter, cross)\n        return populationAfter\n    }\n    const mutation = (populationAfter) => {\n        //Mutacja\n        populationAfter.map((i, index) => {\n            let probability = Math.random();\n            if (probability <= mutations) {\n                let point = Math.floor(Math.random() * 5) + 1;\n                let parent = createBinaryString(i)\n                let before = parent.slice(0, point - 1)\n\n                let after = parent.substring(point)\n\n                let mutated = parent.charAt(point - 1)\n\n                if (mutated == 0) {\n                    mutated = 1\n                }\n                else if (mutated == 1)\n                    mutated = 0\n\n                let mutatedChild = before + mutated + after\n                populationAfter.splice(index, 1, parseInt(mutatedChild, 2))\n\n            }\n        })\n        console.log(\"Populacja po mutacji: \" + populationAfter, mutations)\n        return populationAfter\n    }\n\n    const theBestChromosome = (resultAdaptations, populations) => {\n        let counter = 0\n        let chromosome = 0\n        let theBestChromosome = []\n        resultAdaptations.map((i, index) => {\n            if (i >= counter) {\n                counter = i\n                chromosome = index\n            }\n            return i\n        })\n        theBestChromosome.push(counter, \",\", populations[chromosome])\n        console.log(\"Najlepszy chromoson: \" + theBestChromosome)\n        return theBestChromosome\n    }\n\n    const run = (numberPopulation, result, iterations) => {\n        let populations = startPopulation(numberPopulation)\n        let resultAdaptations = adaptationResult(populations)\n        let sumAdaptation = SumAdaptationResult(resultAdaptations)\n        let counter = 0;\n        let BestChromosome\n        while ((sumAdaptation < result) && (counter < iterations)) {\n\n            let percentAdaptations = percentAdaptation(resultAdaptations, sumAdaptation)\n            let populationAfterRouletteWhell = rouletteWheel(percentAdaptations, populations)\n            let populationAfterCross = crosses(populationAfterRouletteWhell)\n            let populationAfterMutated = mutation(populationAfterCross)\n            populations = populationAfterMutated\n            resultAdaptations = adaptationResult(populationAfterMutated)\n            counter++\n            console.log(\"Iteracja numer: \" + counter)\n\n            sumAdaptation = SumAdaptationResult(resultAdaptations)\n            BestChromosome = theBestChromosome(resultAdaptations, populations)\n        }\n        setendresult(BestChromosome)\n        setendpopulation(resultAdaptations)\n        setadaptation(sumAdaptation)\n        setcounter(counter)\n    }\n\n    return (\n        <div className=\"content\">\n\n            <div className=\"inputs\">\n                <label htmlFor=\"number\"> Wielkość populacji </label>\n                <input type=\"number\" id=\"number\" value={numberPopulation} onChange={(e) => handleinput(e)} />\n\n                <label htmlFor=\"resut\"> Oczekiwany wynik </label>\n                <input type=\"number\" id=\"result\" value={result} onChange={(e) => handleinput(e)} />\n\n                <label htmlFor=\"iterations\"> Pokolenia</label>\n                <input type=\"number\" id=\"iterations\" value={iterations} onChange={(e) => handleinput(e)} />\n\n                <label htmlFor=\"cross\"> Krzyzowanie  </label>\n                <input type=\"number\" id=\"cross\" value={cross} min=\"0\" max=\"1\" onChange={(e) => handleinput(e)} />\n\n                <label htmlFor=\"mutations\"> Mutacja </label>\n                <input type=\"number\" id=\"mutations\" value={mutations} min=\"0\" max=\"1\" onChange={(e) => handleinput(e)} />\n            </div>\n            <button onClick={() => run(numberPopulation, result, iterations)}>Oblicz</button>\n            <div className=\"result\">\n                <h3> Najlepszy chromoson: {endresult && endresult.map(i =>\n                    <span>{i} </span>\n                )} </h3>\n                {adaptation === result ?\n                    <h3 style={{ color: \"green\" }}>Suma adaptacji:  {adaptation} </h3> :\n                    <h3>Suma adaptacji: {adaptation}</h3>}\n\n                <h3>Końcowa populacja: {endpopulation && endpopulation.map(i =>\n                    <>\n                        <p> {i} </p>\n                    </>\n                )}\n                </h3>\n                {counter >= iterations ?\n                    <h3 style={{ color: \"red\" }}>Ilosc pokoleń:  {counter} </h3> :\n                    <h3>Ilosc pokoleń: {counter}</h3>}\n\n\n            </div>\n        </div >\n    );\n}\n\nexport default Content;\n\n //(Math.log(32) / Math.log(2)) + 4 * Math.pow(i, 2) - 9 * i","import React from 'react';\nimport './App.css';\nimport Content from './Content'\n\nfunction App() {\n\n\n  return (\n    <div className=\"Background\" >\n      <div className=\"Frame\" >\n        <Content className=\"Content\"\n        />\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}